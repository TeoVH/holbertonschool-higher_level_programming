The ``0-add_integer`` module
============================

Using ``add_integer``
----------------------------

First import ``add_integer`` from the module:

	>>> add_integer = __import__('0-add_integer').add_integer

Test use of default b=98 value:

	>>> add_integer(2)
	100

Test two ints:

	>>> add_integer(2, 3)
	5

Test two floats:

	>>> add_integer(2.0, 3.0)
	5

Test float and int:

	>>> add_integer(2.0, 1)
	3

	>>> add_integer(2, 1.0)
	3

Test negative, positive ints:

	>>> add_integer(-9, 16)
	7

	>>> add_integer(9, -16)
	-7

Test two negative digits:

	>>> add_integer(-4, -5)
	-9

	>>> add_integer(-4.0, -5.0)
	-9

----------------------------
FAIL CASES:

Test no args:

	>>> add_integer(None)
	Traceback (most recent call last):
	...
	TypeError: a must be an integer

Test invalid args:

	>>> add_integer("Holberton")
	Traceback (most recent call last):
	...
	TypeError: a must be an integer

	>>> add_integer(11, [1, -1])
	Traceback (most recent call last):
	...
	TypeError: b must be an integer

	>>> add_integer(None, "Holberton")
	Traceback (most recent call last):
	...
	TypeError: a must be an integer

	>>> add_integer(1, "2")
	Traceback (most recent call last):
	...
	TypeError: b must be an integer
	
Test float overflow:

	>>> add_integer(float("inf"))
	Traceback (most recent call last):
	...
	OverflowError: cannot convert float infinity to integer


	>>> add_integer(float("-inf"))
	Traceback (most recent call last):
	...
	OverflowError: cannot convert float infinity to integer

Test float value:

	>>> add_integer(1, float('NaN'))
	Traceback (most recent call last):
	...
	ValueError: cannot convert float NaN to integer
